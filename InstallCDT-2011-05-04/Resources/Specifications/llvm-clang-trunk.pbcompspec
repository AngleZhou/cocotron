(
	{
		Identifier = org.cocotron.%REPLACE%ProductVersion%REPLACE%.%REPLACE%platform%REPLACE%.%REPLACE%architecture%REPLACE%.llvm.clang.%REPLACE%compilerVersion%REPLACE%;
		BasedOn    = com.apple.compilers.llvm.clang.1_0;
		Name       = "%REPLACE%ProductName%REPLACE% %REPLACE%ProductVersion%REPLACE% %REPLACE%Platform%REPLACE% %REPLACE%architecture%REPLACE% llvm-clang %REPLACE%compilerVersion%REPLACE%";
		Version    = "org.cocotron.%REPLACE%ProductVersion%REPLACE%.%REPLACE%platform%REPLACE%.%REPLACE%architecture%REPLACE%.clang.%REPLACE%compilerVersion%REPLACE%";
		Vendor     = "cocotron.org";
		ExecPath   = "/Developer/%REPLACE%ProductName%REPLACE%/%REPLACE%ProductVersion%REPLACE%/llvm-clang-%REPLACE%compilerVersion%REPLACE%/bin/clang";
		Architectures = (i386);

		SupportsZeroLink              = No;
		SupportsPredictiveCompilation = No;
    	SupportsHeadermaps            = No;
    	DashIFlagAcceptsHeadermaps    = No;

        Options = (
        {   Name = SDKROOT;
            Type = Path;
            CommandLineArgs = ();
        },
	{
		Name=%REPLACE%PRODUCTNAME%REPLACE%_FRAMEWORK_SEARCH_PATH;
		Type = string;
		DefaultValue = "/Developer/%REPLACE%ProductName%REPLACE%/%REPLACE%ProductVersion%REPLACE%/%REPLACE%Platform%REPLACE%/%REPLACE%architecture%REPLACE%/Frameworks";
		CommandLineArgs = ( "-F$(value)" );
	},
	{
		Name=%REPLACE%PRODUCTNAME%REPLACE%_DEFINE;
		Type = bool;
		DefaultValue = YES;
		CommandLineArgs = { YES = (-D__%REPLACE%PRODUCTNAME%REPLACE%__); NO = (); };
	},
        /* overrides */
        {   Name = arch;
            CommandLineArgs = ( );
/* despite overriding arch here, the link command still generates it, so we have to implement it in the compiler too */
        },
        {   Name = USE_HEADERMAP;
            Type = bool;
            DefaultValue = NO;
        },
        {   Name = PREBINDING; /* this override doesn't work */
            Type = bool;
            DefaultValue = NO;
        },
        {   Name =  CLANG_COCOTRON_RUNTIME;
            Type = bool;
            DefaultValue = YES;
            CommandLineArgs = { YES = (-fcocotron-runtime); NO = (); };
            Category = CodeGeneration;
        },
        {   Name =  CCC_HOST_TRIPLE;
            Type = string;
            DefaultValue = "%REPLACE%TARGET%REPLACE%";
            CommandLineArgs = ( -ccc-host-triple, "$(value)" );
            Category = Compile;
        },
        /* GCC is required since clang does not support an option to set "as" (assembler) with a different argument*/
        {   Name =  CCC_GCC_NAME;
            Type = string;
            DefaultValue = "/Developer/%REPLACE%ProductName%REPLACE%/%REPLACE%ProductVersion%REPLACE%/%REPLACE%Platform%REPLACE%/%REPLACE%architecture%REPLACE%/gcc-4.3.1/bin/%REPLACE%TARGET%REPLACE%-gcc";
            CommandLineArgs = ( -ccc-gcc-name, "$(value)" );
            Category = Compile;
        },
        {   Name =  PLATFORM_INCLUDE;
            Type = string;
            CommandLineArgs = ( "-I/Developer/%REPLACE%ProductName%REPLACE%/%REPLACE%ProductVersion%REPLACE%/%REPLACE%Platform%REPLACE%/%REPLACE%architecture%REPLACE%/llvm-clang-%REPLACE%compilerVersion%REPLACE%/%REPLACE%TARGET%REPLACE%/include" );
            Category = Compile;
        },
        {   Name = WARNING_CFLAGS;
            CommandLineArgs = ( );
        },

		);

	}
)
